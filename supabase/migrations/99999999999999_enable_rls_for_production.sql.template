/*
 * Migration: Re-enable RLS for production
 * 
 * Purpose: Restore secure Row Level Security policies before deploying to production
 * 
 * Tables affected: profiles, plans, fixed_points, feedback
 * 
 * ⚠️ CRITICAL: Run this migration before deploying to production!
 * 
 * Special notes:
 * - Removes permissive development policies
 * - Restores production-grade security policies
 * - Ensures users can only access their own data
 * - This migration reverses changes from 20251024120600
 * 
 * SKIP IN DEVELOPMENT:
 * - This migration is SKIPPED during local development
 * - To enable in production, run: ALTER DATABASE postgres SET app.enable_production_rls = 'true';
 * - Then reset/rerun migrations
 */

-- ============================================================================
-- CONDITIONAL EXECUTION - ONLY RUN IF PRODUCTION RLS IS ENABLED
-- ============================================================================

DO $$
BEGIN
  -- Check if we should enable production RLS
  -- In local development, this setting is not set, so we skip
  IF current_setting('app.enable_production_rls', true) IS DISTINCT FROM 'true' THEN
    RAISE NOTICE '';
    RAISE NOTICE '⚠️  ============================================================';
    RAISE NOTICE '⚠️  SKIPPING production RLS migration';
    RAISE NOTICE '⚠️  Currently running in DEVELOPMENT mode';
    RAISE NOTICE '⚠️  ============================================================';
    RAISE NOTICE '';
    RAISE NOTICE 'Development RLS policies remain active (permissive access).';
    RAISE NOTICE '';
    RAISE NOTICE 'To enable production RLS policies:';
    RAISE NOTICE '  1. Run: ALTER DATABASE postgres SET app.enable_production_rls = ''true'';';
    RAISE NOTICE '  2. Reset database: supabase db reset';
    RAISE NOTICE '';
    RETURN;
  END IF;
  
  RAISE NOTICE '';
  RAISE NOTICE '✅ ============================================================';
  RAISE NOTICE '✅ ENABLING PRODUCTION RLS POLICIES';
  RAISE NOTICE '✅ ============================================================';
  RAISE NOTICE '';

  -- ============================================================================
  -- RE-ENABLE RLS POLICIES FOR: profiles
  -- ============================================================================

  -- Drop development policies
  DROP POLICY IF EXISTS "profiles_dev_select_all" ON profiles;
  DROP POLICY IF EXISTS "profiles_dev_insert_all" ON profiles;
  DROP POLICY IF EXISTS "profiles_dev_update_all" ON profiles;
  DROP POLICY IF EXISTS "profiles_dev_delete_all" ON profiles;

  -- Restore production policies
  CREATE POLICY "profiles_select_own"
      ON profiles
      FOR SELECT
      TO authenticated
      USING (auth.uid() = id);

  CREATE POLICY "profiles_insert_own"
      ON profiles
      FOR INSERT
      TO authenticated
      WITH CHECK (auth.uid() = id);

  CREATE POLICY "profiles_update_own"
      ON profiles
      FOR UPDATE
      TO authenticated
      USING (auth.uid() = id)
      WITH CHECK (auth.uid() = id);

  CREATE POLICY "profiles_delete_own"
      ON profiles
      FOR DELETE
      TO authenticated
      USING (auth.uid() = id);

  RAISE NOTICE '✅ Production RLS policies restored for: profiles';

  -- ============================================================================
  -- RE-ENABLE RLS POLICIES FOR: plans
  -- ============================================================================

  -- Drop development policies
  DROP POLICY IF EXISTS "plans_dev_select_all" ON plans;
  DROP POLICY IF EXISTS "plans_dev_insert_all" ON plans;
  DROP POLICY IF EXISTS "plans_dev_update_all" ON plans;
  DROP POLICY IF EXISTS "plans_dev_delete_all" ON plans;

  -- Restore production policies
  CREATE POLICY "plans_select_own"
      ON plans
      FOR SELECT
      TO authenticated
      USING (auth.uid() = user_id);

  CREATE POLICY "plans_insert_own"
      ON plans
      FOR INSERT
      TO authenticated
      WITH CHECK (auth.uid() = user_id);

  CREATE POLICY "plans_update_own"
      ON plans
      FOR UPDATE
      TO authenticated
      USING (auth.uid() = user_id)
      WITH CHECK (auth.uid() = user_id);

  CREATE POLICY "plans_delete_own"
      ON plans
      FOR DELETE
      TO authenticated
      USING (auth.uid() = user_id);

  RAISE NOTICE '✅ Production RLS policies restored for: plans';

  -- ============================================================================
  -- RE-ENABLE RLS POLICIES FOR: fixed_points
  -- ============================================================================

  -- Drop development policies
  DROP POLICY IF EXISTS "fixed_points_dev_select_all" ON fixed_points;
  DROP POLICY IF EXISTS "fixed_points_dev_insert_all" ON fixed_points;
  DROP POLICY IF EXISTS "fixed_points_dev_update_all" ON fixed_points;
  DROP POLICY IF EXISTS "fixed_points_dev_delete_all" ON fixed_points;

  -- Restore production policies
  CREATE POLICY "fixed_points_select_own"
      ON fixed_points
      FOR SELECT
      TO authenticated
      USING (
          EXISTS (
              SELECT 1 FROM plans
              WHERE plans.id = fixed_points.plan_id
              AND plans.user_id = auth.uid()
          )
      );

  CREATE POLICY "fixed_points_insert_own"
      ON fixed_points
      FOR INSERT
      TO authenticated
      WITH CHECK (
          EXISTS (
              SELECT 1 FROM plans
              WHERE plans.id = fixed_points.plan_id
              AND plans.user_id = auth.uid()
          )
      );

  CREATE POLICY "fixed_points_update_own"
      ON fixed_points
      FOR UPDATE
      TO authenticated
      USING (
          EXISTS (
              SELECT 1 FROM plans
              WHERE plans.id = fixed_points.plan_id
              AND plans.user_id = auth.uid()
          )
      )
      WITH CHECK (
          EXISTS (
              SELECT 1 FROM plans
              WHERE plans.id = fixed_points.plan_id
              AND plans.user_id = auth.uid()
          )
      );

  CREATE POLICY "fixed_points_delete_own"
      ON fixed_points
      FOR DELETE
      TO authenticated
      USING (
          EXISTS (
              SELECT 1 FROM plans
              WHERE plans.id = fixed_points.plan_id
              AND plans.user_id = auth.uid()
          )
      );

  RAISE NOTICE '✅ Production RLS policies restored for: fixed_points';

  -- ============================================================================
  -- RE-ENABLE RLS POLICIES FOR: feedback
  -- ============================================================================

  -- Drop development policies
  DROP POLICY IF EXISTS "feedback_dev_select_all" ON feedback;
  DROP POLICY IF EXISTS "feedback_dev_insert_all" ON feedback;
  DROP POLICY IF EXISTS "feedback_dev_update_all" ON feedback;
  DROP POLICY IF EXISTS "feedback_dev_delete_all" ON feedback;

  -- Restore production policies
  CREATE POLICY "feedback_select_own"
      ON feedback
      FOR SELECT
      TO authenticated
      USING (auth.uid() = user_id);

  CREATE POLICY "feedback_insert_own"
      ON feedback
      FOR INSERT
      TO authenticated
      WITH CHECK (
          auth.uid() = user_id
          AND EXISTS (
              SELECT 1 FROM plans
              WHERE plans.id = feedback.plan_id
              AND plans.user_id = auth.uid()
          )
      );

  CREATE POLICY "feedback_update_own"
      ON feedback
      FOR UPDATE
      TO authenticated
      USING (auth.uid() = user_id)
      WITH CHECK (auth.uid() = user_id);

  CREATE POLICY "feedback_delete_own"
      ON feedback
      FOR DELETE
      TO authenticated
      USING (auth.uid() = user_id);

  RAISE NOTICE '✅ Production RLS policies restored for: feedback';

  -- ============================================================================
  -- PRODUCTION MODE ACTIVE
  -- ============================================================================

  RAISE NOTICE '';
  RAISE NOTICE '✅ ============================================================';
  RAISE NOTICE '✅ PRODUCTION RLS POLICIES ACTIVE';
  RAISE NOTICE '✅ ============================================================';
  RAISE NOTICE '';
  RAISE NOTICE 'All RLS policies have been restored to production settings.';
  RAISE NOTICE 'Users can now only access their own data.';
  RAISE NOTICE '';

END $$;
